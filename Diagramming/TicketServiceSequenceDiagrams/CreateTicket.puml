@startuml

actor "Client" as client
participant "API Gateway/Lambda" as apiGateway
participant "CreateTicketActivity" as createTicketActivity
participant "TicketDao" as ticketDao
database "DynamoDB" as dynamoDB

title Update Ticket

client -> apiGateway : HTTP Request
activate apiGateway

apiGateway -> createTicketActivity : CreateTicketRequest
activate createTicketActivity

createTicketActivity -> createTicketActivity : validate ticket title

alt if title contains invalid characters
createTicketActivity --> apiGateway : throw InvalidAttributeValueException
apiGateway --> client : return 400 response

else else continue
end

createTicketActivity -> createTicketActivity : validate ticket description

alt if description contains invalid characters
createTicketActivity --> apiGateway : throw InvalidAttributeValueException
apiGateway --> client : return 400 response

else else continue
end

createTicketActivity -> createTicketActivity : generateTicketId()

createTicketActivity -> ticketDao : createTicket(ticketId, title, description, status)
activate ticketDao

ticketDao -> dynamoDB : store ticket
activate dynamoDB

dynamoDB --> ticketDao : return 200 response
deactivate dynamoDB

ticketDao --> createTicketActivity : return new Ticket object
deactivate ticketDao

createTicketActivity -> createTicketActivity: create TicketModel

createTicketActivity -> createTicketActivity: TicketModel with saved Ticket object data

createTicketActivity -> createTicketActivity: set TicketModel field in CreateTicketResponse

createTicketActivity --> apiGateway : return CreateTicketResponse
deactivate createTicketActivity

apiGateway --> client : return 200 response with CreateTicketResponse data
deactivate apiGateway

@enduml